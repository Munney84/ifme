# See https://help.github.com/articles/ignoring-files for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'

# Ignore bundler config.
/.bundle

# Ignore database (configuration or not) files.
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore all logfiles and tempfiles.
*.log
/tmp

*.DS_Store
*.keep
*.byebug_history

# Ignore application configuration
/config/env/test.env
/config/env/development.env

# Ignore all IDE, TextEditor configuration files
.vs/
.idea/
.tags
*.swp

# Ignore coverage results
/coverage

# Ignore auto-generated JavaScript
/public/javascripts

# React on Rails
npm-debug.log*
node_modules

# Generated js bundles
/public/webpack/*
/public/webpack-test/*

# Uploads
/public/uploads

/public/assets

# Ignore gems installed locally
/vendor

### Terraform ###
# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

